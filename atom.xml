<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kevin Coleman]]></title>
  <link href="http://www.kcoleman.me/atom.xml" rel="self"/>
  <link href="http://www.kcoleman.me/"/>
  <updated>2015-06-11T07:42:21-07:00</updated>
  <id>http://www.kcoleman.me/</id>
  <author>
    <name><![CDATA[Kevin Coleman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hosting Side Projects for Free]]></title>
    <link href="http://www.kcoleman.me/blog/2015/06/10/hosting-side-projects/"/>
    <updated>2015-06-10T19:33:59-07:00</updated>
    <id>http://www.kcoleman.me/blog/2015/06/10/hosting-side-projects</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/czech_2.jpg" title="Hosting Side Projects for Free" class="banner-img img-responsive"/></p>

<p>With <a href="https://blog.heroku.com/archives/2015/5/7/new-dyno-types-public-beta">Heroku&rsquo;s latest pricing restructure announcement</a>, I decided it was time to re-evaluate my <a href="http://www.kcoleman.me/projects">side-project</a> hosting strategies.  Historically, <a href="http://heroku.com">Heroku</a> has been my go to as a hosting provider for my various rails application endeavors, because it is so easy to setup and, most importantly, free.</p>

<p>Previously my strategy for free hosting on Heroku without any server sleeping was to configure <a href="http://newrelic.com">new relic</a> to measure server uptime.  This was a great trick to keep your Heroku server from sleeping and it let you keep an eye out for server down time.  I shall be sad to see that go :(.</p>

<p>My new recipe for creating new side project deployments is as follows:</p>

<h1>Buying a domain for free</h1>

<p>With the new <a href="http://www.newtldlist.com/">influx of TLD extensions</a>, many registrars are heavily discounting these new extensions in order to encourage main stream adoption.  You can snag a new domain name for dirt cheap, and often free, using one of these new domain extensions.</p>

<p>If you are still a student or still have a .edu email address (thanks, <a href="http://gatech.edu">Georgia Tech</a>!), you can register a .me domain for free and/or a heavily discounted .com or .io domain using <a href="https://education.github.com/pack">Github.com&rsquo;s education pack</a>.</p>

<p>Checkout <a href="http://register.science">register.science</a>, <a href="http://register.party">register.party</a>, and get on the <a href="http://www.alpnames.com/">Alpnames mailing list</a> to be notified of when free domain names are available for registration.</p>

<h1>Hosting</h1>

<h2>Heroku (free-ish)</h2>

<p>You can stick with Heroku dyno&rsquo;s but like I said before, they are no longer allow websites to be active 24 per day.  Heroku will still be my go to for scheduled rake tasks, or anything that doesn&rsquo;t need to be awake all day since it is so easy to deploy to.</p>

<p>Heroku also has great free database hosting for side projects.  As long as your db doesn&rsquo;t exceed 10,000 rows, Heroku will host it for free and give you a nice interface to run queries on.</p>

<h2>Apigee (free)</h2>

<p><a href="https://apigee.com/docs/api-services/content/what-apigee-edge">Apigee Edge</a> promises a lot of really <a href="https://apigee.com/about/pricing/apigee-edge-pricing-features">nice features</a> for their developer accounts: a buttload of storage space, unlimited bandwidth, and api analytics.  The big gotcha&rsquo;s though are they only host nodejs applications and their documentation is terrible.  <del>Once</del> if you can figure out how to get your website running, it is pretty simple to maintain, but getting it up there may take hours.  I used them for the <a href="http://challengepost.com/software/sentimus-edegx">Sears Hackathon</a> and the struggle was real.</p>

<p>You can also do some pretty sweet stuff with combining api&rsquo;s into new apis.  They also have a service that competes with Parse for managing mobile app data, but again, the documentation is terrible.  Good luck.</p>

<h2>Github pages (free)</h2>

<p>I host this blog on <a href="http://pages.github.com">Github pages</a> and build things with <a href="http://octopress.org/">Octopress</a>.  Deployments and settings things up are a breeze, but github only hosts static content.</p>

<p>A small part of me is considering moving <a href="http://AtlantaStartupJobs.com">AtlantaStartupJobs.com</a> to github, because the content there only changes once per day.  I would just need to write ruby tasks to grab the latest Atlanta start up jobs, generate the html for them, and then push up to Github.</p>

<p>Since it is static, there is not backend database other than static hosting .json files, which could be a thing&hellip;</p>

<h2>Amazon Web Services (free-ish)</h2>

<p>For one year, you can utilize the basics of <a href="http://aws.amazon.com">AWS</a> for free.  One big catch here is setting up AWS servers and configuring them can be a weekend project on its own, unless you are familiar with devops.  It is not where near as simple as Heroku and you are limited by the resources of one ec2 machine.  It doesn&rsquo;t scale well if you plan on hosting a bunch of different projects.</p>

<p>AWS has <a href="https://aws.amazon.com/rds/">RDS</a> which makes it super easy to throw up a database.  They support <a href="https://www.mysql.com/">mysql</a>, <a href="http://www.postgresql.org/">postgres</a>, and a few others.</p>

<h2>OpenShift (use this one!)</h2>

<p><a href="http://openshift.com">OpenShift</a> seems like the best drop in replacement for Heroku.  They have a free tier with reasonably powerful servers.  Unfortunately the database shares the same limited resources the application server utilizes, so you get a bit less than 1GB of storage space for your application and database to share.</p>

<p>My strategy here is to keep my Heroku database up and just configure my OpenShift application to connect directly to the Heroku one, so I don&rsquo;t have to deal with shared resources.  This may make my website a little bit slower, but it should be good enough.</p>

<h2>Cloud99</h2>

<p>I have heard bad stories about <a href="http://www.cloud66.com/">Cloud99</a> and they were <a href="https://news.ycombinator.com/item?id=5685406">hacked a few years ago</a>, plus they are not free.  My advice is to stay away.</p>

<h1>Free email</h1>

<p>Having an @gmail.com account as the linked support email for your side project is so not classy.  You can configure your free custom domain with <a href="http://zoho.com">Zoho</a> and be able to email your customers from a more legit looking domain.  Be sure to configure your MX records properly so your new domain doesn&rsquo;t get sent to the spam folder.</p>

<h1>Free transactional email sending</h1>

<p>I really like <a href="http://mandrill.com">Mailchimp&rsquo;s Mandrill</a>.  I have been using them for years and haven&rsquo;t had any problems.  They offer a generous number of emails sent (10k) to be exact and don&rsquo;t limit their services in features, just mailing volume.</p>

<h1>Free SSL certs</h1>

<p>Another sweet trick you can do for your side project websites is to use <a href="http://cloudflare.com">Cloudflare</a> to deliver valid SSL certificates for your projects.  From an SEO perspective, google loves SSL and from a safety and privacy perspective users love SSL.  You can read up on how to do with <a href="https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/">here</a>.</p>

<p>It took me 15 minutes to configure <a href="http://www.kcoleman.me/">kcoleman.me</a> and <a href="http://AtlantaStartupJobs.com">AtlantaStartupJobs.com</a> to be behind Cloudflare.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Search to Atlanta Startup Jobs]]></title>
    <link href="http://www.kcoleman.me/blog/2015/06/06/adding-search-to-atlanta-startup-jobs/"/>
    <updated>2015-06-06T05:23:14-07:00</updated>
    <id>http://www.kcoleman.me/blog/2015/06/06/adding-search-to-atlanta-startup-jobs</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/czech_1.jpg" title="Adding search to Atlanta Startup Jobs" class="banner-img"/></p>

<p>I found a few minutes today to finally add search to <a href="http://atlantastartupjobs.com">Atlanta Startup Jobs</a>.  I had been putting it off for a long time, thinking it would be a long laborous process, but I found it was shockingly easy.  Here is what I did:</p>

<h2>Install pg_search</h2>

<p>The two leading gems that drive postgress fulltext search are <a href="https://github.com/Casecommons/pg_search">pg_search</a> and <a href="https://github.com/textacular/textacular">textacular</a>.  I went with pg_search, because it has more love on github.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg_search&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and run bundle</p>

<figure class='code'><figcaption><span>console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">  bundle</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modify model</h2>

<p>For the models you want to search, add <code>include PgSearch</code> to the top of them in order to enable the pg_search DSL.  Since <a href="http://atlantastartupjobs.com">Atlanta Startup Jobs</a> only has one searchable model (job_posts), I include this line in the model:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">pg_search_scope</span> <span class="ss">:search_generic</span><span class="p">,</span> <span class="ss">:against</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:company_name</span><span class="p">,</span> <span class="ss">:description</span><span class="o">]</span><span class="p">,</span> <span class="ss">:order_within_rank</span> <span class="o">=&gt;</span> <span class="s2">&quot;created_at DESC&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I included the &ldquo;order_within_rank&rdquo;, to protect the order across different pages, since postgres randomly ranks items with equivalent rank score.</p>

<h2>Modify controller</h2>

<p>Here is what my search action looks like in my controller code:</p>

<figure class='code'><figcaption><span>job_posts_controller</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">search</span>
</span><span class='line'>  <span class="vi">@job_posts</span> <span class="o">=</span> <span class="no">JobPost</span><span class="o">.</span><span class="n">search_generic</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:q</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">page</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">:index</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Patterns: Builders and Models]]></title>
    <link href="http://www.kcoleman.me/blog/2015/06/03/rails-patterns-builders-and-models/"/>
    <updated>2015-06-03T00:23:38-07:00</updated>
    <id>http://www.kcoleman.me/blog/2015/06/03/rails-patterns-builders-and-models</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/sf-bridge.jpg" title="Rails Patterns: Builders and Models" class="banner-img"/></p>

<p>A huge problem with ruby on rails apps is many of them end with overly cluttered models and controller methods. An attempt to solve this would be to move what you can to your active record models, but then you end up with heavily bloated model classes that extend way beyond their intended active record design patterns.  Active record models should just manage the communication between the rails app and the database.  Anything else is just code smell.</p>

<p>In all of my experience with rails projects, I found that my active record models typically ended up having a group of methods that helped me create the model itself (think when you create a user, you also need to create a user_profile or if you want to find or create a model).</p>

<h1>Builders</h1>

<p>You can easily break this type of code away from the model by following a builder pattern. Builder patterns are great for creating objects with business logic based on given parameters.  It adds an easy way to add business logic to model creation without adding bloat to your active record model class.</p>

<p>To follow this pattern, create a directory called <code>builders</code> in the <code>/models</code> directory.</p>

<p>Here is an example of my user class before and after a refactor with the builder pattern.</p>

<p>before:</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_admin_user</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">add_role</span> <span class="ss">:admin</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_staff_user</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">add_role</span> <span class="ss">:staff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_user_with_invite</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">send_invitation</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>after:</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># nothing to see here</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/builders/user_builder.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">Builders</span><span class="o">::</span><span class="no">UserBuilder</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_admin_user</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">add_role</span> <span class="ss">:admin</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_staff_user</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">add_role</span> <span class="ss">:staff</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_user_with_invite</span> <span class="n">email</span><span class="p">,</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_or_create_by</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">password</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">send_invitation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Non-AR models</h1>

<p>Models also can get bloated with controller-like actions that have groups of methods that should be broken out into their own classes that the controllers will leverage.  An example of this type of class would be one that manages to send an email to a user.  These models don&rsquo;t extend active record, because they focus is performing business logic on active_record models, not storing them in the database.  Models take in a limited scope of the Params of a request, perform their function, and then return their results to the controller.</p>

<p>Before breaking out email sending, active record models would end up with a collection of email sending methods (send_password_reset, send_notification, etc). All of these should be moved to a model classes because classes have one purpose and active record models are for Savin data, not sending emails.</p>

<p>An example of this could be:</p>

<figure class='code'><figcaption><span>user_invitor.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">class</span> <span class="nc">UserInvitor</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">invite_email</span> <span class="n">email</span>
</span><span class='line'>      <span class="no">Invitation</span><span class="o">.</span><span class="n">create</span> <span class="ss">email</span><span class="p">:</span> <span class="n">email</span>
</span><span class='line'>      <span class="no">UserMailer</span><span class="o">.</span><span class="n">invite_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_later</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Grape Gem: Pros and Cons]]></title>
    <link href="http://www.kcoleman.me/blog/2015/04/07/Ruby-on-Rails-Grape-gem/"/>
    <updated>2015-04-07T01:36:51-07:00</updated>
    <id>http://www.kcoleman.me/blog/2015/04/07/Ruby-on-Rails-Grape-gem</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/grapes.jpeg" title="Ruby on Rails Grape gem" class="banner-img" /></p>

<p>Ruby on Rails is a very powerful framework that is awesome at building RESTful APIs.  Using vanilla rails to build an API, while completely possible, is not always the best way to go.  <a href="https://github.com/intridea/grape">Grape</a> is micro-api framework design to work along side rails for developing an RESTful API.</p>

<p>Grape has some very <a href="https://github.com/intridea/grape/blob/master/README.md">expansive documentation</a> describing how the gem works, so I am not going to dive too deeply into that</p>

<h2>Pros</h2>

<p>Starting off with the positives: grape is great a creating and maintaining documentation.  I love the <a href="https://github.com/tim-vandecasteele/grape-swagger">grape-swagger</a> gem allows you to easily generate documentation from you existing code base.  Since the documentation is generated, all of the code is self-documenting and you don&rsquo;t have to maintain <a href="http://raml.org/">separate API documentation files</a>.</p>

<p>Because grape has its own <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>, it makes creating APIs easy to read and understand.  This makes the code base easier to maintain for future improvements.  Plus it has its own opinion for how to create an API, which really help keep your codebase consistent.</p>

<p>grape gives you a uniform way to control API HTTP Headers.  Rather than having to roll your own classes to manage the response headers, grape makes it easy to set them.</p>

<h2>Cons</h2>

<p>Because grape is independent of rails, it takes a bit of finagling for it to play well with rails.  You have to manually include rails libraries like ActiveRecord or ActiveSupport.  Since there is no ActiveSupport, it makes caching responses more difficult than it should be.</p>

<p>Because grape has its own DSL, there is a bit of a learning curve to understand how it wants you to create an API.  If you have a firm understanding of ruby, it shouldn&rsquo;t be that difficult for you to pick up, but it definitely takes a bit of getting used to.</p>

<p>While grape makes it easier to read and write your api, it does add another layer of complexity to your rails application.</p>

<h2>Conclusion</h2>

<p>For now, I am going to stick with rolling my own APIs using &ldquo;just&rdquo;* the rails framework.  Being more pure rails, gives me more control over the api had has less &ldquo;magic.&rdquo;  If I need to bring on a new developer, they will not have to spend as much time getting up to speed on this new library.</p>

<p>Plus, vanilla rails has an awesome caching tools that don&rsquo;t need to be arm wrestled into the framework.</p>

<ul>
<li>By &ldquo;just&rdquo; I mean, standard gem stack provided in rails 4.2 with typical basic additions I would use in both grape and vanilla rails.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Otto Meet Retrofit: How to Build a Scalable and Performant Android Application]]></title>
    <link href="http://www.kcoleman.me/blog/2015/03/12/android-app-architecture/"/>
    <updated>2015-03-12T12:46:43-07:00</updated>
    <id>http://www.kcoleman.me/blog/2015/03/12/android-app-architecture</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/beach2.jpg" title="Otto meet Retrofit: How to build a scalable and performant Android application" class="banner-img"  /></p>

<p>Unlike Ruby on Rails, Android app development does not have as definitive of an opinion on how apps should be developed and so we have designed our own pattern leveraging open source tools like <a href="http://square.github.io/otto/">Otto</a> and <a href="http://square.github.io/retrofit/">Retrofit</a> to design our applications.</p>

<p>After much research, we at <a href="http://sparkstart.io">Spark Start</a> invested in developing a design pattern for our client applications that leverages the best practices.  Jumping right in here:</p>

<h2>Consuming a RESTful API</h2>

<p>Following Object Oriented Programming&rsquo;s best practices, all objects should each only have one job.  With the start of a new api, create a folder with the name of the API you are trying to consume.</p>

<p>Inside of your client.java file, you will include your retrofit interface classes.  This file will specify how your app will be calling the API.</p>

<figure class='code'><figcaption><span>APIClient.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIClient</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">IUser</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/users/Me.json&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">getMe</span><span class="o">(</span><span class="n">Callback</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@GET</span><span class="o">(</span><span class="s">&quot;/users.json&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">getUsers</span><span class="o">(</span><span class="n">Callback</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This keeps all of our API information in one small maintainable file.  Notice how we are always using the retrofit callback method instead of the async call.  This will allow our code to start a web request on any thread.  Now the code consuming this will never have to worry about thread locking.</p>

<figure class='code'><figcaption><span>APIManager.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">APIManager</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Bus</span> <span class="n">mBus</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">CooleafAPIManager</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Bus</span> <span class="n">bus</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">mBus</span> <span class="o">=</span> <span class="n">bus</span><span class="o">;</span>
</span><span class='line'>        <span class="n">mAsyncRestAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setEndpoint</span><span class="o">(</span><span class="n">API_URL</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setRequestInterceptor</span><span class="o">(</span><span class="n">getCookieInterceptor</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setLogLevel</span><span class="o">(</span><span class="n">RestAdapter</span><span class="o">.</span><span class="na">LogLevel</span><span class="o">.</span><span class="na">BASIC</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Subscribe</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onLoadAuthenticateEvent</span><span class="o">(</span><span class="n">LoadAuthenticateEvent</span> <span class="n">loadAuthenticateEvent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">loadAuthenticateEvent</span><span class="o">.</span><span class="na">getEmail</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">password</span> <span class="o">=</span> <span class="n">loadAuthenticateEvent</span><span class="o">.</span><span class="na">getPassword</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Callback</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">callback</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Callback</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">success</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mBus</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">LoadedMeEvent</span><span class="o">(</span><span class="n">user</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">failure</span><span class="o">(</span><span class="n">RetrofitError</span> <span class="n">retrofitError</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mBus</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">LoadedErrorEvent</span><span class="o">(</span><span class="n">retrofitError</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">sClient</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span><span class="n">email</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">deviceID</span><span class="o">,</span> <span class="n">callback</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The manager class acts as a middleware between the client and the rest of our application.  For our <a href="http://cooleaf.com">most recent application</a>, authentication is handled by cookies, so we had to create our own cookie interceptor to handle authentication.</p>

<p>The manager class subscribes to the bus and watches for events that request an API call.  When a user needs to authenticate, it catches the event, creates a callback which will intern fire off a new event once the response is finished.</p>

<h2>Hooking in Otto into the controller classes</h2>

<p>Otto is a great tool for managing async task events.  It has an event bus that you subscribe and unsubscribe your fragments and activities to, so when a callback (e.g. Retrofit is finished with a request), they can process the response.</p>

<figure class='code'><figcaption><span>LoginFragment.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResume</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>       <span class="kd">super</span><span class="o">.</span><span class="na">onResume</span><span class="o">();</span>
</span><span class='line'>       <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">register</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onPause</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">onPause</span><span class="o">();</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">unregister</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">onLoginClick</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">BusProvider</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">LoadAuthenticateEvent</span><span class="o">(</span><span class="n">userName</span><span class="o">,</span><span class="n">password</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the login fragment is resumed, otto automatically subscribes the fragment to the bus.  When it is paused, it unsubscribes.  This is awesome, because if a request is initiated to the API, but then the fragment is closed before the rest api responds, we don&rsquo;t have the fragment still listening for that response.</p>

<h2>Conclusion</h2>

<p>Otto and retrofit play really nicely together and are great tools for building an android app.  Managing all of the events can get a bit ugly, so be careful how you name them and organize them in the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Atlanta Startup Jobs - Scratch Your Own Itch]]></title>
    <link href="http://www.kcoleman.me/blog/2015/01/12/atlanta-startup-jobs/"/>
    <updated>2015-01-12T17:52:21-08:00</updated>
    <id>http://www.kcoleman.me/blog/2015/01/12/atlanta-startup-jobs</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/park.jpg" title="Atlanta Startup Jobs - Scratch your own itch" class="banner-img"  /></p>

<p>I have always wanted to start my own business, ever since I was in high school. Since then, I have been struggling to find an idea that I am truly passionate enough to invest my time or resources to execute on my own.</p>

<p>So I decided I graduated from Georgia Tech in ‘11, I decided I should do the second best thing: work for someone that is starting their own business. This is a great technique because it reduces your risk (get paid a /mostly/ competitive salary) and gives you an opportunity to learn (make mistakes on someone else’s dollar :-))</p>

<p>While Atlanta has an awesome startup culture unless you are familiar with the big players (co-working spaces, syndications, meetup groups), it can be difficult finding what companies are hiring. The Georgia Tech BuzzBoard only has postings by big name companies that can afford the hefty price tag. Same can be said about the popular job board sites like CareerBuilder.com or Monster.com.</p>

<p>Fast forward a few years and I finally figured out who to talk to and where to look for a startup job postings. But the experience was still frustrating because now I was checking 3-5 different job board websites for the various co-working and syndication websites.</p>

<p>There was no one place to find these jobs.</p>

<p>So I made <a href="http://www.atlantastartupjobs.com">Atlanta Startup Jobs</a></p>

<p>Atlanta Startup Jobs aggregates job postings from all of Atlanta’s job board websites automatically each night. Then every Friday, it emails out to the subscriber list all of the jobs it found over the last week.</p>

<p>The app is written in Ruby on Rails and hosted for free on Heroku. I use a separate application instance on Heroku (still free tier) to crawl the websites so the crawler gets its own set of dyno ours from the web application.</p>

<p>Since its launch 3 months ago, it has found over 350 job postings and gets on average 100 hits per day with a list of 60 subscribers.</p>

<p>If you are looking for a job in Atlanta’s startup community, Atlanta Startup Jobs is the place to start.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SideProject: HappyBeam - Meditate and Improve]]></title>
    <link href="http://www.kcoleman.me/blog/2015/01/08/happybeam/"/>
    <updated>2015-01-08T10:11:59-08:00</updated>
    <id>http://www.kcoleman.me/blog/2015/01/08/happybeam</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/HappyBeam-feature-graphic.png" title="SideProject: HappyBeam - Meditate and improve" class="banner-img"  /></p>

<h3>Please Vote for us!!</h3>

<h1>Happiness Apps Challenge</h1>

<p>Side projects are some of the best way for developers to learn new skills and maybe a little cash :-).  I really enjoy attending <a href="http://www.kcoleman.me/blog/2014/10/26/how-to-win-a-hackathon/">Hackathon&rsquo;s</a>, because they really push my skillset as a developer.</p>

<p>Most of my recently hackathons have required I learned android development, so I decided for my next project to buckle down and make a nicely designed, complicated android app.  The HappinessApps challenge was the perfect excuse for me to build an app worthy of my portfolio.</p>

<p>For the HappinessApps hackathon, <a href="http://kcoleman.me">Kevin Coleman</a> and Haider Khan interviewed 57 unhappy people via Mechanical Turk that used to meditate.  We wanted to know why they stopped meditating.  32 users felt frustrated with meditation, because they never felt like they were getting any better and weren&rsquo;t confident that meditation was improving their happiness.</p>

<h1>Enter <a href="http://www.happybeamapp.com">HappyBeam</a></h1>

<p>&ldquo;If you can&rsquo;t measure it, you can&rsquo;t improve it.&rdquo; -Peter Drucker</p>

<p>HappyBeam is the first app that is specifically designed to measure your inner peace by building up the bridge between physical movements and mental fluctuations. It helps you have a peaceful mind, reduce stress and depression, and improves your meditations. The less movement and lower the score that HappyBeam detects, the more you improve.</p>

<p>HappyBeam runs alongside meditation apps to measure how a user moves during a meditation.  The app calculates a movement score using a cutting-edge algorithm. Happy-peaceful scores are marked green, not-so-good scores are yellow, high-anxiety scores are red.</p>

<p>In the &ldquo;Your Meditations Chart&rdquo;, users see their improving meditation scores across all their meditations. The history list shows a list of each session with a chart displaying when and how long they moved.</p>

<p>Currently, there is no other meditation apps that shows how a user is improving.</p>

<p>HappyBeam leverages the latest Android Wear technology so that users can measure motion with their smartwatch.  This delivers a better reading of their meditation.</p>

<p>HappyBeam was built in 3 weeks for the Happiness Apps challenge.</p>

<p><a href="http://www.happybeamapp.com">Website</a></p>

<p><a href="https://play.google.com/store/apps/details?id=zkhaider.com.happinessproject">Android Play Store</a>​</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Win a Hackathon]]></title>
    <link href="http://www.kcoleman.me/blog/2014/10/26/how-to-win-a-hackathon/"/>
    <updated>2014-10-26T17:14:40-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/10/26/how-to-win-a-hackathon</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/cooking.jpg" title="How to win a hackathon" class="banner-img"  /></p>

<p>I have been to a few hackathons and startup weekends over the last few years and I have a pretty good prize rate (I have placed at more than 50% of the events).  After my back to back win of the ATT and FinApps hackathons, I want to share my thoughts on what it takes to be a winning team.</p>

<p><img src="http://www.kcoleman.me/images/check.jpg" title="Winning Team at the ATT hackathon" style="display: block; margin-left: auto; margin-right: auto; width:35%;" /></p>

<h1>The best prize is the easiest</h1>

<p>Your first goal of each event though should be building out your network.  I have met some very interesting individuals (a VC, and awesome developers and designers, etc.) by attending these events.  Meeting other smart and talented like-minded people is infinitely more valuable (and easier to obtain) than any monetary prize.</p>

<p>I try to avoid grouping with people that I already know, because I want to find people I will work with again in the future.  My friends are known variables.  While awesome, I want to see who else is awesome to work with.</p>

<h1>Winning the competition</h1>

<p><img src="http://www.kcoleman.me/images/att.jpg" title="Winning Team at the ATT hackathon" style="display: block; margin-left: auto; margin-right: auto;" /></p>

<h2>The Team</h2>

<p>First and foremost, as with starting a company, building a software product, or pretty much any other group activity, you need to have a solid team.</p>

<p>There are two types of people on a good Hackathon team: The Coder and The Presenter.</p>

<p>The coders have the easiest job.  They have to develop a working prototype in 18 hours.  Good coders can work independently and solve problems they run into quickly.</p>

<p>Coders have to deliver.  It is more important to have a simple 100% finished product than an advanced 80% finished product.  During the presentation, don&rsquo;t make the judges put on their imagination hats and tell them what you could of done if you <em>insert lame excuse here</em>.</p>

<p>You need one presenter and that person needs to be awesome at public speaking.  Typically they will also provide product development guidance.  The good presenter is just as valuable as a good coder, if not more.</p>

<p>I have seen judges destroy teams without solid presenters during questioning.  Some judges will ask some really hard questions and you have to have someone be able to deliver awesome answers on the fly.</p>

<p>An example of this was at the FinApps hackathon, a judge asked us how we secured our application.</p>

<p>Rather than saying, &ldquo;oh, uhh&hellip; that is a good point. we didn&rsquo;t think of that&rdquo;.  Our presenter said, &ldquo;Our goal for this hackathon was deliver a functioning credit card selector to accomplish one of the goals laid out by the hackathon.  We have strategies for adding security into the project, but it was not a target for our team.&rdquo;</p>

<h2>The Idea</h2>

<p>You need to have an idea that is a tiny bit sexy, flexible, and a lot do-able.</p>

<p>You don&rsquo;t have to bring your own idea, but having one definitely help.  I am not very creative and I typically join other teams.  My first requirement for a team is not if I like their idea, but if I think they have a solid presenter.</p>

<p>I have seen teams enter the competition with an idea, but end up finding out it was physically impossible to execute that idea.  Don&rsquo;t be married to one concept.  13 teams registered for the FinApp&rsquo;s $30,000 prize and only 7 presented.  A big issue was that there wasn&rsquo;t a hardware means of executing their ideas and they ended up going home.</p>

<p>Your idea should easily be understood in 5 minutes or less by a panel of non-technical judges.</p>

<p>Please make sure you have the skillset and the time to execute your idea.  Many teams end up not being able to accomplish anything during a weekend because they were missing a developer, couldn&rsquo;t get it to work, or ran out of time.</p>

<p>I have seen many teams get up there and say &ldquo;hey, everyone reach under your seats and pull out that imagination hat that I put under your seat, because I didn&rsquo;t get anything done this weekend except this 5 min power point presentation.&rdquo;</p>

<h2>Coder Preparation</h2>

<p>Technically you are not allowed to do this before most hackathon events.  Organizers require all work to be at the competition.  But I think there are still a few things you can &lsquo;legally&rsquo; do to help improve your chances of winning.</p>

<p>If you know you are going to work with a certain technology, set up your environment before hand.  Don&rsquo;t go to the hackathon needing to install android studio, ruby on rails, or whatever technology stack you plan on using.  As with any installation, there will be headaches that you should solve before the competition.</p>

<p>If you are working with hardware or an API, make sure your machine can deploy to this hardware before you arrive at the competition.  Many teams loose hours of coding time trying to communicate with a device or API unnecessarily.</p>

<h2>The Presentation</h2>

<p>This is where many teams mess this up.  I have seen some really awesome presentations by people that don&rsquo;t have that impressive of a product and I have seen some terrible presentations by people that could of had a good product.</p>

<p>If you don&rsquo;t have a presenter, please go learn some basic presentation skills.</p>

<h3>Presentation Tips</h3>

<ul>
<li>Don&rsquo;t go up there to show off source code.</li>
<li>Focus on what you accomplished, not what you could do if you had the right resources.</li>
<li>Test your application over and over before presenting.  Don&rsquo;t let it crash!</li>
<li>The basic format should be

<ul>
<li>Introduction of members</li>
<li>Problem you tried to solve</li>
<li>How you solved the problem</li>
<li>Demonstration of the prototype</li>
</ul>
</li>
<li>Be funny.  Start of with a Joke or a &ldquo;ask the audience&rdquo; question like &ldquo;How many of you have this problem?&rdquo;</li>
</ul>


<h1>Closing</h1>

<p><img src="http://www.kcoleman.me/images/business_card.jpg" title="Spark Starter Business Card" style="display: block; margin-left: auto; margin-right: auto; width:50%;" /></p>

<p>Don&rsquo;t forget to bring business cards! Remember this event should be about the networking and not the prize.</p>

<p>Be sure to communicate with everyone you talk with what your skillset is and what you are interested in.  This will help them understand how you can help them in the future (and how they can help you).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Rails App Two Web Applications]]></title>
    <link href="http://www.kcoleman.me/blog/2014/10/09/one-rails-app-two-web-applications/"/>
    <updated>2014-10-09T17:11:45-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/10/09/one-rails-app-two-web-applications</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/mountains.jpeg" title="One Rails App Two Web Applications" class="banner-img"  /></p>

<p>When building a rails application, sometimes it is quicker to build one code base that is shared on two completely different frontend applications.  I am going to discuss the design approaches I used to segregate the two rails websites within a single rails application base.</p>

<h2>Configuring the Front End</h2>

<p>My first &lsquo;trick&rsquo; is to build the system such that all interactions are run through an RESTful API.  This gives one surface area for applications (front end apps or mobile or whatever) and it reduces the amount of duplication that maybe experienced across the two different websites.</p>

<p>For my projects, I lean towards AngularJS, mainly because there is a strong community backing the technology, not to mention this is one of Google&rsquo;s babies.</p>

<p>Both of these websites will have a unique look and feel as well as style sheets and html designs.</p>

<h3>Break apart the CSS files</h3>

<p>I divided my assets/stylesheets folder to look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  assets/stylesheets/application.css
</span><span class='line'>  assets/stylesheets/app1/app1.css
</span><span class='line'>  assets/stylesheets/app2/app2.css</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>application.css</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/*</span>
</span><span class='line'><span class="c"> *= require_self</span>
</span><span class='line'><span class="c"> */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how I removed the standard <code>require_tree .</code> line to prevent it from auto loading the entire project.  I just want it to load global attributes for the two applications.</p>

<figure class='code'><figcaption><span>app1.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span> <span class="s2">&quot;compass/reset&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;compass&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/variables&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/typography&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/footer&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/alerts&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/buttons&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/sprites&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/navigation&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/modals&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/partials/framework_and_overrides&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/pages/bootstrap_override&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/pages/questions&quot;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;app1/pages/content&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I am explicitly including the app1.css resources in app1.</p>

<p>application.css will include styling that is shared between the two applications.  An example, might be your frameworks like bootstrap.</p>

<p>appN.css will include the styles that are unique to your web application.  You should create an /assets/stylesheets/app1/ folder to house all of your style sheets for that specific app.</p>

<p>In my layouts view, you will only want to be loading app1 and application when a user requests an app1 website and app2 and application when the user requests an app2 website.</p>

<p>By checking the request host, you can determine the domain the user is on you can decide which css files need to be delivered to the client.  The host check should be offloaded to a helper method that would like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">app1?</span>
</span><span class='line'>    <span class="s1">&#39;app1.com&#39;</span> <span class="o">==</span> <span class="n">request</span><span class="o">.</span><span class="n">host</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the rails views layout folder, you only include the style sheets that are used</p>

<figure class='code'><figcaption><span>layout.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">==</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;application&quot;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;all&#39;</span>
</span><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="n">app1?</span>
</span><span class='line'>  <span class="o">==</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;app1&quot;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;all&#39;</span>
</span><span class='line'><span class="o">-</span> <span class="k">elsif</span> <span class="n">app2?</span>
</span><span class='line'>  <span class="o">==</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;app2&quot;</span><span class="p">,</span> <span class="ss">:media</span> <span class="o">=&gt;</span> <span class="s1">&#39;all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to tell rails to precompile these new css files</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( app1.css app2.css )</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Javascript Divorce</h3>

<p>You can use a similar technique to break up your javascript files into two projects</p>

<figure class='code'><figcaption><span>layout.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">==</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span>
</span><span class='line'>  <span class="o">-</span> <span class="k">if</span> <span class="n">app1?</span>
</span><span class='line'>    <span class="o">==</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;app1&#39;</span>
</span><span class='line'>  <span class="o">-</span> <span class="k">elsif</span> <span class="n">app2?</span>
</span><span class='line'>    <span class="o">==</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;app2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t forget to tell rails to precompile these new assets.</p>

<figure class='code'><figcaption><span>config/initializers/assets.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( app1.js app2.js )</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Backend</h2>

<p>If you want to turn certain features on and off for certain applications, you should use the <a href="https://github.com/FetLife/rollout">rollout gem</a>.  It is a great tool for enabling and disabling features on the fly, or just completely locking up certain parts of the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs Rails and SEO Part 2]]></title>
    <link href="http://www.kcoleman.me/blog/2014/10/07/angularjs-rails-and-seo-part-2/"/>
    <updated>2014-10-07T17:26:43-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/10/07/angularjs-rails-and-seo-part-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/beach.jpeg" title="Angularjs Rails and SEO Part 2" class="banner-img"  /></p>

<p>This is a continuation post from <a href="http://www.kcoleman.me/blog/2014/10/03/angularjs-rails-seo/">Angularjs Rails and SEO Part 1</a>.</p>

<p>Now we need to configure Ruby on Rails to redirect Google&rsquo;s requests to get the non-ajax version of the page.  Google flags requests by replacing the &lsquo;#!&rsquo; in the url with <code>?_escaped_fragment_=</code> so you can know the route it is trying to fetch.</p>

<p>To catch this, we will add a <code>before_filter</code> to the application controller to watch for the <code>_escaped_fragment_</code> parameter.  This could will look like:</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">protect_from_forgery</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:catch_escaped_fragment</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">catch_escaped_fragment</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">fragment</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:_escaped_fragment_</span><span class="o">]</span>
</span><span class='line'>      <span class="c1"># Build the original url</span>
</span><span class='line'>      <span class="n">base_url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">protocol</span><span class="si">}#{</span><span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span><span class="si">}#{</span><span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">url_with_hash</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_url</span><span class="si">}</span><span class="s2">#!</span><span class="si">#{</span><span class="n">params</span><span class="o">[</span><span class="ss">:_escaped_fragment_</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Render it with the PhantomJS script and return the result</span>
</span><span class='line'>      <span class="n">command</span> <span class="o">=</span> <span class="s2">&quot;phantomjs &#39;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/lib/phantomjs/ember_to_static.js&#39; &#39;</span><span class="si">#{</span><span class="n">url_with_hash</span><span class="si">}</span><span class="s2">&#39; silence&quot;</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="sb">`</span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="n">result</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This rails application controller code will trigger the phantomjs script we wrote in the previous blog post.  Since it asks to run it in silent mode, we can take the entire log output of the script (which should be the completed AngularJS application) and return that to google.</p>

<h2>Rails concurrency</h2>

<p>Because this methodology is blocking the thread request, when phantomjs tries to fetch the angularjs page, the website hangs. Because rails only executes one request at a time, phantomJS&rsquo;s request will sit and wait forever, since the request it is currently in will never finish.   To fix this, you will need to run your server with passenger.  Passenger can handle multiple requests in Ruby.</p>

<p>Add <code>gem 'passenger'</code> to your Gemfile. Then you can run it like this</p>

<p>and to run the application you can run <code>passenger -p 3000 -a 127.0.0.1</code>  if this is your first time running passenger with rails, you will have to follow an installation script.</p>

<p>Awesome! You are finished.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angularjs Rails and SEO Part 1]]></title>
    <link href="http://www.kcoleman.me/blog/2014/10/03/angularjs-rails-seo/"/>
    <updated>2014-10-03T09:05:45-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/10/03/angularjs-rails-seo</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/mountain.jpeg" title="Angularjs Rails and SEO Part 1" class="banner-img"  /></p>

<h2>Intro</h2>

<p>Today I was handed an interesting project around improve the SEO surface area of an <a href="https://angularjs.org/">AngularJS</a> SPA for a client.  After a bit of research on how to handle this, I decided that I should roll my own tool to solve this problem as it will give me greater flexibility later as opposed to going with a SaaS app like <a href="http://Prerender.io">Prerender.io</a>.</p>

<h2>Basic Concept</h2>

<p>Google says they are doing a much better job <a href="http://googlewebmastercentral.blogspot.com.es/2014/05/understanding-web-pages-better.html">rendering Javascript</a> on websites.  Awesome! But what about the <a href="http://bing.com">other</a> <a href="http://duckduckgo.com">guys</a>?</p>

<p>What we are going to do is leverage <a href="http://phantomjs.org/">PhantomJS</a> to render the angularjs code on the fly as the server requests the dynamic pages.  This way we don&rsquo;t have to deal with maintain a bunch of ERB files or pre-rendering static pages on our server.</p>

<p>The cost will be that the page load time will be a bit slower unfortunately and these requests will be expensive on memory, but we just want the fast (dev time-wise) solution to hit the ground.</p>

<h2>PhantomJS client</h2>

<p>First you need to <a href="http://phantomjs.org/download.html">install PhantomJS</a>.  If you are using Heroku to host your application, you will need to configure Heroku to run phantomjs with <a href="https://github.com/stomita/heroku-buildpack-phantomjs">this build back</a>.</p>

<p>Unfortunately there isn&rsquo;t a great way to detect when the page is finished loading.  My trick to solve this problem is for all of the controllers to set a status flag on the <code>body</code> tag noting they are finished running.  Now all of my controllers look like this:</p>

<figure class='code'><figcaption><span>app/assets/javascripts/app/controllers/index.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span> <span class="s">&#39;IndexCtrl&#39;</span><span class="p">,</span> <span class="nf">($scope, $rootScope) -&gt;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nv">$rootScope.status = </span><span class="s">&#39;ready&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and I have this on my <code>body</code> tag</p>

<figure class='code'><figcaption><span>app/views/layouts/application.html.slim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'>  body data-status=&quot;{ { status } }&quot;
</span></code></pre></td></tr></table></div></figure>


<p>So now I can watch the data-status to see when angular has finished running.</p>

<p>Now lets create a angularjs-to-static.js.coffee file.  This will take in a URL and spit out the html for the page using PhantomJS.</p>

<figure class='code'><figcaption><span>lib/phantomjs/angularjs_to_static.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># angularjs_to_static.js.coffee</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># This script takes a URL as argument. (In that order!)</span>
</span><span class='line'><span class="c1"># The script then runs the Javascript on this page and waits until Ember has finished loading.</span>
</span><span class='line'><span class="c1"># It then renders the resulting static HTML page to the console.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Keep track of whether the page has already been exported. The &#39;setTimeout&#39; mess might cause it to be exported multiple times.</span>
</span><span class='line'><span class="nv">exportPageContents = </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">unless</span> <span class="nx">pageHasBeenExported</span>
</span><span class='line'>    <span class="nv">pageHasBeenExported = </span><span class="kc">true</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="nx">page</span><span class="p">.</span><span class="nx">content</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Finished.&quot;</span> <span class="k">unless</span> <span class="nx">silence</span>
</span><span class='line'>    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#wait until angularjs says its ready</span>
</span><span class='line'><span class="nv">waitForStatus = </span><span class="nf">(page, callback) -&gt;</span>
</span><span class='line'>  <span class="nv">expiration = </span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># try and fetch the desired element from the page</span>
</span><span class='line'>  <span class="nv">result = </span><span class="nx">page</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>  <span class="nx">system</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">writeLine</span> <span class="nx">result</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># if desired element found then call callback after 50ms</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">result</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">writeLine</span> <span class="s">&quot;- trigger found&quot;</span> <span class="k">unless</span> <span class="nx">silence</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">callback</span><span class="p">()</span>
</span><span class='line'>      <span class="k">return</span>
</span><span class='line'>    <span class="p">),</span> <span class="mi">50</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># determine whether timeout is triggered</span>
</span><span class='line'>  <span class="nv">finish = </span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">()</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">finish</span> <span class="o">&gt;</span> <span class="nx">expiration</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">writeLine</span> <span class="s">&quot;- timed out&quot;</span> <span class="k">unless</span> <span class="nx">silence</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># haven&#39;t timed out, haven&#39;t found object, so poll in another 100ms</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">waitForStatus</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">waitForStatus</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">),</span> <span class="mi">100</span>
</span><span class='line'>  <span class="k">return</span>
</span><span class='line'>
</span><span class='line'><span class="nv">fs = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;fs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">system = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;system&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nv">page = </span><span class="nx">require</span><span class="p">(</span><span class="s">&quot;webpage&quot;</span><span class="p">).</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'><span class="nv">pageHasBeenExported = </span><span class="kc">false</span>
</span><span class='line'><span class="nv">script = </span><span class="kc">undefined</span>
</span><span class='line'><span class="nv">url = </span><span class="kc">undefined</span>
</span><span class='line'><span class="nv">silence = </span><span class="kc">undefined</span>
</span><span class='line'><span class="nv">script = </span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">or</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Output usage info and exit.</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Usage: &quot;</span> <span class="o">+</span> <span class="nx">script</span> <span class="o">+</span> <span class="s">&quot; URL [silence]&quot;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;  URL: address to open and run&quot;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;  silence: enter &#39;silence&#39; (without quotes) to only output the page content and suppress info messages&quot;</span>
</span><span class='line'>  <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="nv">url = </span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">silence = </span><span class="p">(</span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">is</span> <span class="s">&quot;silence&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Will render &quot;</span> <span class="o">+</span> <span class="nx">url</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span>  <span class="k">unless</span> <span class="nx">silence</span>
</span><span class='line'>  <span class="nx">page</span><span class="p">.</span><span class="nx">open</span> <span class="nx">url</span><span class="p">,</span> <span class="nf">(status) -&gt;</span>
</span><span class='line'>    <span class="k">unless</span> <span class="nx">status</span> <span class="o">is</span> <span class="s">&quot;success&quot;</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;Unable to load URL!&quot;</span>  <span class="k">unless</span> <span class="nx">silence</span>
</span><span class='line'>      <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">()</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Start a long timeout. When the page still doesn&#39;t seem to have finished loading after 30s, something has likely gone wrong. This timeout prevents a hangup of the server.</span>
</span><span class='line'>      <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span> <span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>        <span class="nx">exportPageContents</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="p">),</span> <span class="mi">30000</span>
</span><span class='line'>      <span class="nx">waitForStatus</span> <span class="nx">page</span><span class="p">,</span> <span class="nx">exportPageContents</span>
</span><span class='line'>    <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Side note</h3>

<p>Much of this script was borrowed from <a href="http://www.pieterjongsma.com/2013/01/11/ember-google-ajax-rails.html">Ember.js, Google Ajax crawling and Rails</a>, but I didn&rsquo;t like he was detecting with angularjs was finished.  He was waiting for the page to finish its server requests, added some padding time and then finished.  Waiting for the flag to be set is a better technique, because I know angular has finished.</p>

<p>Essentially this script takes in a URL, loads the page, and then waits for the flag to be set.  If the flag takes longer than 30s to be set, it bails and just renders what it has.  If you are on Heroku, you may need to shorten this flag to 15s, because <a href="https://devcenter.heroku.com/articles/request-timeout">Heroku has a request timeout</a> of 30s.</p>

<p><a href="http://www.kcoleman.me/blog/2014/10/07/angularjs-rails-and-seo-part-2/">Part 2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buying My First Real Estate Investment]]></title>
    <link href="http://www.kcoleman.me/blog/2014/07/28/new-house/"/>
    <updated>2014-07-28T09:46:17-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/07/28/new-house</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/city-houses.jpg" title="First Real Estate Investment Property" class="banner-img"  /></p>

<p>This week I will be closing on my first house that I plan on renovating and selling in the next few months.  I have been looking for a low-end flip for over a year now and I finally found one via <a href="http://networthrealtyusa.com/">NetWorth Reality</a> in Atlanta.</p>

<p>Throughout this year long process, I have learned tons about the Atlanta real estate market and in general what to look for in purchasing an investment property.</p>

<p>My criteria for my first purchase has been:</p>

<ol>
<li>The property value + $15k (for wiggle room) must be within my budget</li>
<li>No seriously large repairs should be necessary. (roof and foundation need to be in good condition)</li>
<li>Near my residence</li>
<li>Low crime neighborhood.</li>
<li>Zoned for good schools.</li>
<li><a href="http://Zillow.com">Zillow</a> and comparable houses needed agree on the value of the home*.</li>
<li>Best-case estimated profit needs to be at least $15,000.</li>
<li>Must be able to be sold quickly at a higher value</li>
<li>No condos (typically have high Homeowners Association fees and renting restrictions)</li>
</ol>


<p>The house I am buying meets most of the criteria, although its location is about 30 minutes away one direction.  As a developer that sells his time, I am not excited about having to drive that on a weekly (daily?!) basis, but I plan on outsourcing as much of the property management that I can.</p>

<p>Once the repairs are finished on the property, I want to sell this property as soon as I can, because I don&rsquo;t have time to manage renters or property repairs.  While I already have interest from one person to rent from the house,</p>

<p>Hopefully this will be a profitable endeavor, but it could just end up being an expensive learning experience.</p>

<ul>
<li>While I agree that <a href="http://Zillow.com">Zillow</a> doesn&rsquo;t know what it is talking about when it comes to home values.  I also think that the people buying the homes would not want to purchase a house too far off the price listed online.  The house I bought Zillow thinks is worth $115k and I purchased it for $47k.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get OSX Git Branch Name in Console]]></title>
    <link href="http://www.kcoleman.me/blog/2014/07/23/how-to-get-osx-git-branch-name-in-console/"/>
    <updated>2014-07-23T12:13:52-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/07/23/how-to-get-osx-git-branch-name-in-console</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/hills.jpg" title="How to get OSX git branch name in console" class="banner-img"  /></p>

<p>I have always had a problem of forgetting which git branch I was on and committing my changes to the wrong branch.  The best way I have found to solve this problem is to have the branch name printed in the console prompt.</p>

<p>You can modify the prompt message in OSX by setting the PS1 variable in <code>~/.bash_profile</code></p>

<p>First you need to parse the git branch name by using this function</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">parse_git_branch() {</span>
</span><span class='line'><span class="go">    git branch 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/ (\1)/&#39;</span>
</span><span class='line'><span class="go">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you need to set your PS1 variable so that it shows the parse branch I added a bit of color to mine so I can see it more clearly.</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">export PS1=&quot;\# \u \w\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cheers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Web Consulting]]></title>
    <link href="http://www.kcoleman.me/blog/2014/07/05/web-consulting/"/>
    <updated>2014-07-05T08:46:57-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/07/05/web-consulting</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/ppl-skyline.jpg" title="How to start web consulting" class="banner-img"  /></p>

<p>I have lots of advice for you. I just moved from a corporate job to rails consulting 2-4mo ago, because someone offered me more money than I could say no to.</p>

<h1>Types of consultants</h1>

<p>This is my paradigm of freelance web/mobile consulting. There are 4 types of developers that do this.</p>

<ol>
<li><p>The developer that is 30+ years old and has worked in a consulting corporate job for many years. He has a strong relationship with a handful of clients, and he leaves his job, takes the clients and now he has 2-3 companies that love him and will always give him work every year. They only do work that they want to do and at the rate they want (Usually $120+/hr).</p></li>
<li><p>There are the developers that hopefully know coding really well, but they don&rsquo;t have a strong network of clients. They are probably looking online at oDesk/Freelancer, <a href="http://twitter.com">Twitter</a>, or maybe posting on <a href="https://news.ycombinator.com/item?id=7970372">HN</a>. They probably have a website and maybe their SEO rank is super awesome for a &ldquo;{technology} {city}&rdquo; search in Google.</p>

<p> This type may even pay for services like LeadSugar. I have never subscribed to websites like that, but I feel like the most profitable awesome contracts are not going to be found posted publicly online.</p></li>
<li><p>This would be a graduate of type two, where they have 2-3 companies that love them, that will always put food on the table, and hopefully pay them what they want to get paid. I feel like there is a bit of luck to get here, but not impossible. I do not know a single developer in this type.</p></li>
<li><p>The last type is a type 2 developer, that a type 1 person is giving extra work to that they don&rsquo;t want to do or can&rsquo;t do. They share a piece of the pie with you, because they want to grow their consultancies into a developer shop, or maybe they just want to work on other things, but they still want to capitalize on their network.</p></li>
</ol>


<p>I am a type 2 developer, that knows several type 1 developers, and thus ended up in type 4. I have found that most of the jobs posted publicly, where type 2s look for work, are low paying and terrible. The clients posting them look at development as a commodity and aim for the lowest bidder. There are tons (corporate full timers looking to augment income, college kids, 3rd world, etc.) of type 2 developers looking to fill these gigs. Most of these gigs pay low. They want to spend $500 to build Facebook.com for puppies and they will have at least 8 people bidding on their project.</p>

<h1>Actionable Advice</h1>

<ol>
<li><p>If you have a terrible portfolio, look at doing a few bad jobs off of <a href="https://www.odesk.com">oDesk</a> to build that out. Write super awesome code and get good at what you do. You need to set yourself apart, skill wise, from all of the other developers.</p></li>
<li><p>Riches are in the niches. I met a developer last week that started programming at age 28, 4 years ago, and he has gotten really good at <a href="http://www.webrtc.org">WebRTC</a>. He is one of a very few &lsquo;experts&rsquo; on the stack in South East USA and anyone that wants WebRTC consulting has to talk with him. I am sure he is terrible at programming, but if he is the only webrtc pro, then that is all that matters. Find a niche.</p></li>
<li><p>Attend tech (ruby on rails, android, etc) meetups. I have a pretty strong network of developers and one of them took me under his wing and has been handing me his client work. He is taking money off the top, but I am still making my rate (which is at least 2x what I would expect from oDesk jobs), so I am happy. You will not find direct clients at tech meet ups, but you might can find mentors or other consultants that have too much on their plate.</p></li>
<li><p>Attend non-tech events in industries known to need and use technology (marketing, sales, small business, etc.). You want industries that make a lot of money, and already pay for technology. Hopefully you will find projects here like: &ldquo;I need my sales force account hooked into my <a href="http://www.infusionsoft.com">Infusionsoft</a> account with <a href="http://www.twilio.com">Twilio</a> integration so that I can be notified about new clients.&rdquo;</p>

<p> I have talked <a href="http://www.kcoleman.me/blog/2014/06/21/goodie-hack-number-2/">before about my experiences</a> at <a href="http://goodiehack.com">Goodie Hack</a>.  There were very few developers there and lots of people looking for them.</p></li>
<li><p>Reverse sale recruiters. I get hit up by recruiters weekly asking if I want to work at the &ldquo;hottest start up in ___.&rdquo; I say, &ldquo;Hey, I am not looking for a position right now, but I am looking to take on new contracts. I will give you $500 gift card, if you refer a client to me and we seal a +1 month contract.&rdquo; Now I got a little team of people interested in helping me out.</p></li>
<li><p>Attend <a href="http://www.atlsuds.com/">startup</a> events. There are lots of people that have ideas, raised millions of dollars, but don&rsquo;t have the tech talent to build what they want to build. You need to find these people. Build relationships with VC firms. There are lots of startups with a $200,000 tech budget and no one to spend it on.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goodie Hack #2]]></title>
    <link href="http://www.kcoleman.me/blog/2014/06/21/goodie-hack-number-2/"/>
    <updated>2014-06-21T14:31:51-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/06/21/goodie-hack-number-2</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/urban.jpg" title="Goodie Hack Atlanta 2014" class="banner-img" /></p>

<p><a href="http://goodiehack.com/">Goodie Hack</a> was awesome! I met some really cool people and got to learn more about the Atlanta Food and Farming organizations.</p>

<p>I joined the Atlanta Food and Farming organization where we integerated <a href="https://www.google.com/maps/preview">Google Map Builder</a> and <a href="http://www.google.com/google-d-s/createforms.html">Google Forms</a> to build an awesome resource for sharing data about where your food comes from.  Food related organizations submit data about what they are doing to encourage healthy eating in the community.  Our map includes information like where the closet community garden is or where they can donate their compost.</p>

<p><a href="https://www.linkedin.com/in/yosepk">Yosep Kim</a> built <a href="htttp://asitgoes.com">AsItGoes.com</a> to help presenters get feed back on the presentation. Apparently, I need to be more funny, ha.  I am going to take this tool to my <a href="http://www.toastmasters.org/">Toastmaster</a>&rsquo;s club and use it for feedback for my presentations.</p>

<p>I can&rsquo;t wait to attend to the next event.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What It Takes to Be Entry Level Rails Developers]]></title>
    <link href="http://www.kcoleman.me/blog/2014/06/13/entry-level-rails/"/>
    <updated>2014-06-13T13:42:01-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/06/13/entry-level-rails</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/bridge.jpg" title="What it takes to be entry level Rails developers" class="banner-img" /></p>

<p>I get asked a lot about what it takes to break into the Ruby on Rails industry at the various hackathons and start up weekends I have attended.  Spurred by this <a href="http://www.reddit.com/r/ruby/comments/282n9k/what_ruby_skills_are_essential_for_an_entrylevel/">/r/ruby question</a>.  I shall try my best to answer this question in a public setting.</p>

<h2>I want to this in an entry level rails developer</h2>

<ol>
<li>Build a <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUDL</a> application</li>
<li>Understand and apply <a href="http://getbootstrap.com/">bootstrap</a></li>
<li>Build a to-do application or any simple super basic app that requires a few controllers, models, etc.</li>
<li>Use slightly obscure gems, like the <a href="https://github.com/sferik/twitter">twitter</a>, <a href="https://github.com/arsduo/koala">koala</a>, <a href="https://rubygems.org/gems/mandrill-api">mandrill</a>, <a href="https://github.com/amatsuda/kaminari">kaminari</a>, <a href="https://github.com/rails/jbuilder">jbuilder</a>, etc. to prove to me that they can read the documentation and figure out how to use a gem.</li>
</ol>


<h2>Bonuses</h2>

<ol>
<li>Understanding a testing framework (<a href="https://github.com/rspec/rspec-rails">rspec</a> is my preference)</li>
<li>Knowing some basic javascript (jquery)</li>
<li>Know <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a></li>
<li>Knowing Thin Controllers, Fat Models</li>
<li>Attends the local ruby on rails <a href="http://meetup.com">meetup</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4.1 Enums: How Not to Handle States]]></title>
    <link href="http://www.kcoleman.me/blog/2014/06/05/rails-4-dot-1-enums-how-not-to-handle-states/"/>
    <updated>2014-06-05T10:08:29-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/06/05/rails-4-dot-1-enums-how-not-to-handle-states</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/road.jpg" title="Rails 4.1 enums: How not to handle stats" class="banner-img"/></p>

<p>I subscribe to the <a href="http://rubyweekly.com/">Ruby Weekly</a> news blog, so I can stay updated with the latest rails practices and gems.  90% of the time, there is some really good information in there.  But occasionally, sometime catches my eye that just feels wrong.</p>

<p>In this weeks email, there was a post linking to <a href="https://www.youtube.com/watch?v=UbOkNduhCfw">An introduction to Rails 4.1&rsquo;s Enum</a> where he talks about how you should use enums to handle your model states.</p>

<p><em>This upset me.</em></p>

<p>You really shouldn&rsquo;t be using enums for variables that don&rsquo;t have a strong numerical meaning (like in the example below), because it obscures the meaning of the variable&rsquo;s value.</p>

<h2>What are Enums</h2>

<p>For those that don&rsquo;t know what enums are, they essentially allow you to give names to integers.  This is really cool, because I can do things like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">enum</span> <span class="ss">http_code</span><span class="p">:</span> <span class="p">{</span> <span class="ss">continue</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">ok</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">accepted</span><span class="p">:</span> <span class="mi">202</span><span class="p">,</span> <span class="ss">redirection_perm</span><span class="p">:</span> <span class="mi">301</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I can have named response codes to http codes.   I can do things like <code>response.http_code == :ok</code> to see if the response was valid.  Now I wont have to remember all of those http numbers, I can just remember the names of them.</p>

<p>That is what enums are good for.  State is what enums are bad for. Unfortunately the <a href="https://github.com/codemy/blogmenow/pull/3/files">example code</a> for using them in rails suggests that you use them for state.</p>

<h2>Why enums are bad</h2>

<p>Yeah, its great to have name attributes for numbers, but this gets bad when you start putting them in the database and the numbers don&rsquo;t really mean much by themselves, which is how you would look at them if you were to hit the database directly with a query.</p>

<h3>Only exist inside of the application</h3>

<p>So if my states are like so with the order being pending => processing => accepted => complete</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">enum</span> <span class="ss">state</span><span class="p">:</span> <span class="p">{</span> <span class="ss">pending</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">processing</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">accepted</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">complete</span><span class="p">:</span> <span class="mi">4</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I will only see numbers in the database.  If I do an export of the db to hand to my data analyst, he is going to have no idea what those numbers mean.  Now I have to include my db dump and my .rb file with the enums spelled out.</p>

<p>Or perhaps, you have a <a href="http://nodejs.org/">nodejs</a> application powering your chat service that also accesses the same db.  In the nodejs world, you would have to maintain a similar enum list so it can read from the states.  Your nodejs developer would have to reference your .rb file to determine what number really means what.</p>

<h3>Growth causes confusion</h3>

<p>This will also get confusing as your application grows you may want to add more states. You may end up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">enum</span> <span class="ss">state</span><span class="p">:</span> <span class="p">{</span> <span class="ss">pending</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">processing</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">accepted</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">complete</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">shipping</span><span class="p">:</span> <span class="mi">5</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new order would be pending => processing => accepted => shipping => complete.  Which is awkward, because in the database, it looks like 1 => 2 => 3 => 5 => 4.  Which can feel a bit weird if you don&rsquo;t know what is going on.</p>

<p>If you had just left your states as named strings, you wouldn&rsquo;t have this odd ordering issue or this ambiguity of what number resides with what state.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Path to Success]]></title>
    <link href="http://www.kcoleman.me/blog/2014/06/04/path-to-success/"/>
    <updated>2014-06-04T14:50:34-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/06/04/path-to-success</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/escalator.jpg" title="My path to success" class="banner-img" /></p>

<p>My first and foremost goal is to become a successful entrepreneur.  Unfortunately, I am still working on trying to get there.  While my <a href="http://www.kcoleman.me/coleman-laws">grandfather&rsquo;s laws</a> make a great guide for running a business, I don&rsquo;t have a business yet to run.</p>

<p>After talking with many other successful entrepreneurs, I find that everyone has to find their own path to success, but you can learn from what the greats have to say and let their advice guide you.</p>

<h2>Get out of the house</h2>

<p>I work remotely.  My day consists of waking up, working, going to Publix for food, saying hello to the checkout lady and then returning home for more work.  It is relationships with other people that <a href="http://money.usnews.com/money/personal-finance/articles/2012/03/15/why-good-friends-make-you-happy">lead to happy</a> and successful lives.</p>

<p>While I can function completely fine by working from my home office, I need to get out of the house.  I need to connect with other people to build a strong business network.  For me, I build these relationships through my local <a href="http://www.meetup.com/find/events/?keywords=programming">programming meetups</a>, attending <a href="http://startupweekend.org/">startup weekends</a>, or any <a href="http://startupgossip.com">other start up events</a>.</p>

<h2>Keep coding</h2>

<p>My day job is freelance coding rails.  I spent 8-10 hours sitting on my computer developing models, controllers, and whatever else my clients need to keep cashflow coming in, but that is boring.  I need to keep my skills sharp and balanced.</p>

<p>Great! I know ruby on rails really well, but I want to be good at lots of different tools, because I have no idea what skills I will need in the future.  That is why I play with different frameworks like <a href="http://www.kcoleman.me/blog/2014/04/30/nodejs-chat-guide/">NodeJS</a> or <a href="blog/2014/03/11/reporting-with-rails-p1/">AngularJS</a>.</p>

<h2>Stay focused on your goals</h2>

<p>I attended the professional speakers <a href="http://www.toastmasters.org/">Toast Master&rsquo;s</a> group a few months ago and one of the speakers was in the process of writing a &ldquo;self-help guide to success&rdquo; book.  Her name and the book’s escapes me, but she had an interesting technique for staying focused on life.  Every morning, write your goals in a journal.  This starts your day off thinking about what you want to accomplish and keeps it focused on detecting signals that may help you accomplish your goals.</p>

<h2>Keep a short list</h2>

<p>I find myself in situations where I think: &ldquo;Great! I have nothing to do right now.&rdquo; Bullshit.  There are always things to do, I find my mind is terrible about coming up with them once its entered that state.</p>

<p>Whenever I come up with a task that needs to get done, I toss it into my <a href="http://wunderlist.com">Wunderlist</a> inbox.  Now I find that I have a moment with nothing scheduled, I can always look their for guidance.  I only put short actionable items in that list like: do laundry, ready <a href="http://engineering.richrelevance.com/bandits-recommendation-systems/">this</a> article on recommendation systems, or check <a href="http://www.zillow.com">Zillow</a> for homes.</p>

<p>Hopefully by following these goals, I will stumble through life and find myself retired by athange 30, ha!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bot on Heroku]]></title>
    <link href="http://www.kcoleman.me/blog/2014/05/31/twitter-bot-on-heroku/"/>
    <updated>2014-05-31T21:05:08-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/05/31/twitter-bot-on-heroku</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/alley.jpg" title="Twitter bot v1 on Heroku" class="banner-img" /></p>

<p>Inspired by the Technology Review article, <a href="http://www.technologyreview.com/view/527746/how-advanced-socialbots-have-infiltrated-twitter/">How Advanced Social bots Have Infiltrated Twitter</a>, I thought it would be an interesting to see how difficult it is to write a bot to generate followers over a given topic.</p>

<p>I think a first basic start would be to post proven social content from other sources (namely <a href="http://reddit.com/">reddit.com</a>).  Version one of the bot will just repost the top article of the day on a given sub-reddit onto this twitter account.  Lets get started.</p>

<h2>Import the gems</h2>

<p>First I need to create my <code>Gemfile</code> and reference these gems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;redditkit&#39;</span><span class="c1">#, :git =&gt; &#39;https://github.com/samsymons/RedditKit.rb.git&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;redis&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a number of reddit gems, but I found that <a href="https://github.com/samsymons/RedditKit.rb">redditkit</a> seems to be the most maintained.</p>

<p>Redis will be used as our data store to prevent duplicate tweets.</p>

<h2>Twitter Bot code</h2>

<figure class='code'><figcaption><span>twitter_bot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redditkit&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;open-uri&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">KARMA_THRESHOLD</span><span class="o">=</span><span class="mi">2000</span>
</span></code></pre></td></tr></table></div></figure>


<p>First we need to require all of the resources.  Unfortunately these are not automatically loaded like they are in rails.  I set the KARMA_THRESHOLD to a score of 2000, so that we only share quality content.  <code>open-uri</code> will be used with the image upload.  If you upload the image as opposed to sharing the link, the photo will appear in the stream, thus giving it more exposure.</p>

<figure class='code'><figcaption><span>twitter_bot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REDISCLOUD_URL&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s2">&quot;redis://localhost:6379/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REDISCLOUD_URL&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;REDISCLOUD_URL&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="ss">:port</span> <span class="o">=&gt;</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&gt;</span> <span class="n">uri</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I am hosting this with Heroku, I need to set a default environment variable for the rediscloud_url which is set by the <a href="http://redislabs.com/redis-cloud">Redis cloud addin</a></p>

<p>Next I configure the twitter gem with the API keys I got from their website</p>

<figure class='code'><figcaption><span>twitter_bot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Twitter</span><span class="o">::</span><span class="no">REST</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span>        <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span>     <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">access_token</span>        <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">authenticated_client</span> <span class="o">=</span> <span class="no">RedditKit</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="n">posts</span> <span class="o">=</span> <span class="n">authenticated_client</span><span class="o">.</span><span class="n">links</span> <span class="s1">&#39;all&#39;</span><span class="p">,</span> <span class="ss">:category</span> <span class="o">=&gt;</span> <span class="ss">:top</span><span class="p">,</span> <span class="ss">time</span><span class="p">:</span> <span class="ss">:hour</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also login to my reddit account and retrieve the links for the sub-reddit of my choice.</p>

<h2>Loop through all of the links and find something to share</h2>

<figure class='code'><figcaption><span>twitter_bot.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">posts</span><span class="o">.</span><span class="n">results</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">link</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">link</span><span class="o">.</span><span class="n">score</span> <span class="o">&gt;</span> <span class="no">KARMA_THRESHOLD</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">link</span><span class="o">[</span><span class="ss">:domain</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;imgur.com&quot;</span> <span class="o">||</span> <span class="n">link</span><span class="o">[</span><span class="ss">:domain</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;i.imgur.com&quot;</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="vg">$redis</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;link:&#39;</span><span class="o">+</span><span class="n">link</span><span class="o">.</span><span class="n">id</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">link</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;r/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">link</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;i.imgur&quot;</span>
</span><span class='line'>      <span class="n">image_url</span> <span class="o">=</span> <span class="n">link</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">image_url</span> <span class="o">=</span> <span class="n">link</span><span class="o">.</span><span class="n">url</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/http:\/\//</span><span class="p">,</span> <span class="s1">&#39;http://i.&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;.jpg&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;cringe.png&#39;</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">fo</span><span class="o">|</span>
</span><span class='line'>      <span class="n">fo</span><span class="o">.</span><span class="n">write</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="s1">&#39;link:&#39;</span><span class="o">+</span><span class="n">link</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">client</span><span class="o">.</span><span class="n">update_with_media</span><span class="p">(</span><span class="n">link</span><span class="o">.</span><span class="n">title</span> <span class="o">+</span> <span class="s2">&quot; #LOL &quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;cringe.png&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I want to only select links with a high enough karma score, with an imgur image, and not in my redis store and not referencing another reddit thread.  I don&rsquo;t want them to include any reddit references in my tweets if I can help it.</p>

<p>Sometimes people post a link to the imgur page instead of directly to the link, so I need to change up the image_url as necessary depending on whether or not they did so.</p>

<p>Next I download the image so I can re-upload it to twitter later.   Next I create the token in my redis store so I don&rsquo;t accidently have any duplicate image links.  I check against that in the if statement above.</p>

<p>Now I update my twitter feed with the link title, a hash tag, and the new image I just downloaded.  Because I am running this on Heroku, the image saved to disk will get lost when the dyno gets killed with the scheduler ends.  So I don&rsquo;t really need to worry about clean up.</p>

<p>I want this to only run once, because twitter will get upset if they notice that fire off tweets in bursts.  I think once per day is a good starting ground and I can move up the frequency, as I get more and more brave.</p>

<h2>Deploy to Heroku</h2>

<p>I need to make this a git repo, add my code so far.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git init</span>
</span><span class='line'><span class="go">git add .</span>
</span><span class='line'><span class="go">git commit -m &quot;first twitter bot commit!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now I need to make the <a href="http://heroku.com">Heroku</a> application to run this under and push it up to the server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">heroku apps:create twitter-bot</span>
</span><span class='line'><span class="go">git push heroku master</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Heroku Scheduler</h2>

<p>Heroku comes with a free scheduler that I can run in daily increments, perfect for this application.  I set configure it so it runs <code>ruby twitter_bot.rb</code> every day at midnight, so users will be able to see my tweets in the morning when they wake up.</p>

<h2>In the future&hellip;.</h2>

<p>I plan on adding more content sources and more frequent posts.  I am running this along side the chrome extension <a href="https://github.com/ztratar/followr">Followr</a>, which is an automated tool for favoriting tweets of other users based on preset hash tags.  So far it has earned me 10 new followers and 3 new re-tweets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails and Redis URL Shortener in Same Application]]></title>
    <link href="http://www.kcoleman.me/blog/2014/05/31/url-shorter-with-redis-and-rails/"/>
    <updated>2014-05-31T11:22:47-07:00</updated>
    <id>http://www.kcoleman.me/blog/2014/05/31/url-shorter-with-redis-and-rails</id>
    <content type="html"><![CDATA[<p><img src="http://www.kcoleman.me/images/locks.jpg" title="Redis key value storage" class="banner-img" /></p>

<p>Here is how to build a quick URL shortener in Rails 4.0 that shares the same application as the rest of your project, but is meant to run on a different domain using <a href="http://redis.io/">Redis</a>.</p>

<h2>Installing Redis</h2>

<p>I recommend just using <a href="http://brew.sh/">brew</a> to install redis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">  brew install redis</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to start it up, open a new terminal window and type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">redis-server</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Link Model creation</h2>

<p>Redis maybe great for quick access to information, but it does not guarantee like an <a href="http://en.wikipedia.org/wiki/ACID">ACID compliant</a> database does that the information you put there will always be there.  Because it is a <a href="http://en.wikipedia.org/wiki/NoSQL">noSQL</a> key-value store in memory, if the server it is running against restarts, its entire memory will be lost and you will need to have a reliable back up so you can re-generate the storage as needed.</p>

<figure class='code'><figcaption><span>migration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="s2">&quot;links&quot;</span><span class="p">,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;short_code&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;long_url&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="s2">&quot;click_count&quot;</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The short code will be a 6-8 digit representation of the longer link which will be stored in the <code>long_url</code> field.  I also want to store the click count of these links, so I am adding that as an attribute as well.</p>

<h2>Link Model code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Link</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:long_url</span><span class="p">,</span> <span class="ss">:click_count</span><span class="p">,</span> <span class="ss">:long_url</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">after_create</span> <span class="ss">:store_in_redis</span>
</span><span class='line'>  <span class="n">before_create</span> <span class="ss">:set_short_code</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">redis_url_key</span><span class="p">(</span><span class="n">short_code</span><span class="p">)</span>
</span><span class='line'>    <span class="s1">&#39;link:&#39;</span><span class="o">+</span><span class="n">short_code</span><span class="o">+</span><span class="s1">&#39;:url&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">redis_clicks_key</span><span class="p">(</span><span class="n">short_code</span><span class="p">)</span>
</span><span class='line'>    <span class="s1">&#39;link:&#39;</span><span class="o">+</span><span class="n">short_code</span><span class="o">+</span><span class="s1">&#39;:clicks&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">url</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">secrets</span><span class="o">.</span><span class="n">shortener_domain</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nb">self</span><span class="o">.</span><span class="n">short_code</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">short_code</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_short_code</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">short_code</span> <span class="o">||=</span> <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">token</span> <span class="o">=</span> <span class="p">(</span><span class="vg">$redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="s1">&#39;link:next:id&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="no">Time</span><span class="o">.</span><span class="n">zone</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">36</span><span class="o">**</span><span class="mi">6</span><span class="p">))</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">36</span><span class="p">)</span>
</span><span class='line'>      <span class="k">break</span> <span class="n">token</span> <span class="k">unless</span> <span class="no">Link</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">short_code</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">store_in_redis</span>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="no">Link</span><span class="o">.</span><span class="n">redis_url_key</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">short_code</span><span class="p">),</span> <span class="nb">self</span><span class="o">.</span><span class="n">product</span><span class="o">.</span><span class="n">purchase_link</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="no">Link</span><span class="o">.</span><span class="n">redis_clicks_key</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">short_code</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To start off, we have our validation code to ensure we don&rsquo;t accidently save bad data.</p>

<p>We want to randomly generate a unique short code that is of appropriate length before we save this to the database.  In <code>set_short_code</code>, I keep trying to a valid randomly generated code based off of the time, an incrementor variable I am storing in Redis to ensure uniqueness.  Hypothetically if I got a request at the exact same second and somehow got the same random number, the Redis variable should protect against double urls.</p>

<p>After we write this to the database, we want to store the <code>short_code</code> and <code>long_url</code> in Redis.  We are doing it after we create, because if there are validation errors, then our Redis storage could contain bad data.  The key for the long url will look like &lsquo;link:uDk3nZz:url&rsquo; and the click count will look like &lsquo;link:uDk3nZz:clicks&rsquo;.  So when I want to pull out the long url, I simple say <code>$redis.get(Link.redis_url_key(params[:short_code]))</code> and I will have the long url, assuming it exists.  I can also update the click count in a similar fashion.</p>

<h2>Side note: Redis best practice</h2>

<p>You should use the following naming scheme for all of your Redis keys, so that you have a standard way of retrieving data: [resource]:[id]:[attribute].</p>

<p>I wrote two helper methods to keep track of how we are naming the keys, so we don&rsquo;t end up with a bunch of magic strings everywhere in our project.  If we want to change how we store links in Redis, we only have to look one place, the link model. We will use them later when we create the controller so we know what fields to access with a given <code>short_code</code>.</p>

<h2>Links controller</h2>

<figure class='code'><figcaption><span>links_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LinksController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="vg">$redis</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">Link</span><span class="o">.</span><span class="n">redis_url_key</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:short_code</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">RoutingError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Not Found&#39;</span><span class="p">)</span> <span class="k">unless</span> <span class="n">url</span>
</span><span class='line'>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">incr</span><span class="p">(</span><span class="no">Link</span><span class="o">.</span><span class="n">redis_clicks_key</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:short_code</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">url</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">302</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use the <code>short_code</code> parameter, and that Redis url key method, we look up the long url.</p>

<p>If we can&rsquo;t find the url, then we rails a 404 page. If not, we continue and bump up the click count.  Redis has a built in incrementor so we wont have to worry about accidently loosing click counts during concurrent requests. and redirect ot the url we found in Redis.</p>

<h2>Configuring Routes to work across multiple domains</h2>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">constraints</span> <span class="ss">domain</span><span class="p">:</span> <span class="s2">&quot;example.com&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/:short_code&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;likes#show&quot;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="s1">&#39;social_share&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We put this the top of our routes.rb file, because we want it to override any of the succeeding route configurations.  I recommend changing your host file to point dev.example.com to 127.0.0.1 so when you test this locally, you would hit your local machine as opposed to the production or staging server.</p>

<h2>To be continue</h2>

<p>In the next article, I will be discussing on how to recover from a Redis failure.</p>
]]></content>
  </entry>
  
</feed>
